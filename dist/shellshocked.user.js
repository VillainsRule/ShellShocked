// ==UserScript==
// @name         ShellShocked
// @description  the most advanced hack for shell shockers.
// @version      1.0.1a
// @icon         https://i.imgur.com/t57csO9.png

// @author       VillainsRule
// @namespace    https://github.com/VillainsRule/ShellShocked

// @match        *://*.shellshock.io/*
// @match        *://*.math.international/*

// @grant none
// @run-at document-start

// ==/UserScript==

(() => {
    (()=>{"use strict";const e=()=>btoa(Math.random().toString(32)),n=new class{guiID=e();aimbot=e();rightmouse=e();esp=e();esplines=e();espboxes=e();onUpdate=e();settingsID=e();lineOrigin=e();constructor(){}get(){return this}},t=new class{settings;constructor(){if(localStorage.getItem("settings"))try{t=JSON.parse(localStorage.getItem("settings"))}catch(e){this.initial()}else this.initial()}initial(){localStorage.removeItem("settings"),this.settings={esp:{enabled:!0,key:"v"},espLines:{enabled:!0,key:"n"},espBoxes:{enabled:!0,key:"m"},aimbot:{enabled:!0,key:"b",rightMouse:{enabled:!0,key:"l"}},menuKey:"h"},this.sync()}sync(){return localStorage.setItem("settings",JSON.stringify(this.settings)),this.get()}get(){return this.settings}set(e){return this.settings=e,this.sync()}};window[n.get().settingsID]=t;const s=t;let i=!1;const o=e=>2===e.button?i="pointerdown"===e.type:"";window.addEventListener("pointerdown",o),window.addEventListener("pointerup",o),s.sync(),async function(){window.XMLHttpRequest=class extends window.XMLHttpRequest{open(e,n){return n.indexOf("shellshock.js")>-1&&(this.isScript=!0),super.open(...arguments)}get response(){if(this.isScript){const e=super.response;let t,s,i,o,a;try{t=/this\.origin=new ([a-zA-Z]+)\.Vector3/.exec(e)[1],s=/([^,]+)=\[\],[^,]+=\[\],{}/.exec(e)[1],i=/"fire":document.pointerLockElement&&([^&]+)&&/.exec(e)[1],o=/createMapCells\(([^,]+),/.exec(e)[1],a=/=([a-zA-Z_$]+)\(this\.mesh,\.[0-9]+\)/.exec(e)[1]}catch(n){return e}return e.replace(o+".render()",`window['${n.get().onUpdate}'](${t},${s},${i});${o}.render()`).replace(`function ${a}`,`function ${a}(){return true;}function someFunctionWhichWillNeverBeUsedNow`).replace(/.prototype.setVisible=function\(\w\){/,`.prototype.setVisible=function(eee){this.getChildTransformNodes().forEach(child=>child.setRenderingGroupId&&child.setRenderingGroupId(window['${n.get().settingsID}'].get().esp.enabled?1:0));`)}return super.response}}}(),window.addEventListener("keyup",(function(e){if(!document.activeElement||"INPUT"!==document.activeElement.tagName)switch(e.key.toLowerCase()){case s.get().menuKey:document.getElementById(n.get().guiID)&&("none"===document.getElementById(n.get().guiID).style.display?document.getElementById(n.get().guiID).style.display="":document.getElementById(n.get().guiID).style.display="none");break;case s.get().aimbot.key:if(!document.getElementById(n.get().aimbot))return;s.get().aimbot.enabled=!s.get().aimbot.enabled,document.getElementById(n.get().aimbot).checked=s.get().aimbot.enabled;break;case s.get().aimbot.rightMouse.key:if(!document.getElementById(n.get().rightmouse))return;s.get().aimbot.rightMouse.enabled=!s.get().aimbot.rightMouse.enabled,document.getElementById(n.get().rightmouse).checked=s.get().aimbot.rightMouse.enabled;break;case s.get().esp.key:if(!document.getElementById(n.get().esp))return;s.get().esp.enabled=!s.get().esp.enabled,document.getElementById(n.get().esp).checked=s.get().esp.enabled;break;case s.get().espLines.key:if(!document.getElementById(n.get().esplines))return;s.get().espLines.enabled=!s.get().espLines.enabled,document.getElementById(n.get().esplines).checked=s.get().espLines.enabled;break;case s.get().espBoxes.key:if(!document.getElementById(n.get().espboxes))return;s.get().espBoxes.enabled=!s.get().espBoxes.enabled,document.getElementById(n.get().espboxes).checked=s.get().espBoxes.enabled}})),async function(){window[n.get().onUpdate]=function(e,t,o){if(!o)return;let a;window[n.get().lineOrigin]||(window[n.get().lineOrigin]=new e.Vector3),a=window[n.get().lineOrigin];let d=[];a.copyFrom(o.actor.mesh.position);const l=o.actor.mesh.rotation.y;a.x+=Math.sin(l),a.z+=Math.cos(l),a.y+=Math.sin(-o.pitch);for(let e=0;e<d.length;e++)d[e].playerExists=!1;for(let n=0;n<t.length;n++){const i=t[n];if(i&&i!==o){if(void 0===i.sphere){const n=new e.StandardMaterial("myMaterial",i.actor.scene);n.emissiveColor=n.diffuseColor=new e.Color3(1,0,0),n.wireframe=!0;const t=e.MeshBuilder.CreateBox("mySphere",{width:.5,height:.75,depth:.5},i.actor.scene);t.material=n,t.position.y=.3,t.parent=i.actor.mesh,i.sphere=t}if(void 0===i.lines){const n={points:[a,i.actor.mesh.position],updatable:!0},t=n.instance=e.MeshBuilder.CreateLines("lines",n,i.actor.scene);t.color=new e.Color3(1,0,0),t.alwaysSelectAsActiveMesh=!0,t.renderingGroupId=1,i.lines=t,i.lineOptions=n,d.push(t)}i.lines.playerExists=!0,i.lines=e.MeshBuilder.CreateLines("lines",i.lineOptions),i.sphere.renderingGroupId=s.get().espBoxes.enabled?1:0,i.sphere.visibility=(s.get().aimbot.enabled||s.get().espBoxes.enabled)&&o!==i&&(0===o.team||o.team!==i.team),i.lines.visibility=i.playing&&i.sphere.visibility&&s.get().espLines.enabled}}for(let e=0;e<d.length;e++)d[e].playerExists||(d[e].dispose(),d.splice(e,1));if(s.get().aimbot.enabled&&(!s.get().aimbot.rightMouse.enabled||i)&&o.playing){let e,n=1/0;for(let s=0;s<t.length;s++){const i=t[s];if(i&&i!==o&&i.playing&&(0===o.team||i.team!==o.team)){const t=Math.hypot(i.x-o.x,i.y-o.y,i.z-o.z);t<n&&(n=t,e=i)}}if(e){const n=e.actor.mesh.position.x-o.actor.mesh.position.x,t=e.actor.mesh.position.y-o.actor.mesh.position.y,s=e.actor.mesh.position.z-o.actor.mesh.position.z;o.yaw=Math.radAdd(Math.atan2(n,s),0),o.pitch=-Math.atan2(t,Math.hypot(n,s))%1.5}}}}(),window.addEventListener("DOMContentLoaded",(()=>async function(){window.setVal=e=>{let n=s.get();"aimbot"===e?n.aimbot.enabled=!n.aimbot.enabled:"rightmouse"===e?n.aimbot.rightMouse.enabled=!n.aimbot.rightMouse.enabled:"esp"===e?n.esp.enabled=!n.esp.enabled:"esplines"===e?n.espLines.enabled=!n.espLines.enabled:"espboxes"===e&&(n.espBoxes.enabled=!n.espBoxes.enabled),s.set(n)},document.body.insertAdjacentHTML("beforeend",`\n        <style>\n        .ssd_container {\n            position: absolute;\n            top: 15px;\n            right: 15px;\n            width: 50vw;\n            height: auto;\n            border: var(--ss-border-blue5);\n            background-color: var(--ss-blue3);\n            z-index: 99999;\n            padding: 2vh;\n            text-align: center;\n            border-radius: var(--ss-space-sm);\n            color: var(--ss-white);\n        }\n\n        .ssd_title {\n            font-family: 'Sigmar One';\n            font-size: 4vh;\n        }\n\n        .ssd_description {\n            font-size: 2.6vh;\n        }\n\n        .ssd_divider {\n            width: calc(90%);\n            margin: 2vh 5%;\n        }\n\n        .ssd_header {\n            font-size: 2.9vh;\n            font-family: 'Sigmar One';\n        }\n\n        .ssd_cheatRow {\n            display: flex;\n            justify-content: center;\n            gap: 5vw;\n            margin-top: 1.5vh;\n        }\n\n        .ssd_cheatName {\n            font-size: 2.5vh;\n            font-family: 'Sigmar One';\n        }\n\n        .ssd_buttons {\n            display: flex;\n            justify-content: center;\n            gap: 5vw;\n        }\n\n        .ssd_button {\n            border: calc(var(--ss-common-border-width)/2) solid var(--ss-blue5);\n            box-shadow: var(--ss-box-shadow-1), var(--ss-btn-dark-bevel) rgb(8,110,141), var(--ss-btn-light-bevel) rgb(0,173,230);\n            border-radius: var(--border-radius);\n            padding: 6px 20px;\n            font-weight: 1000;\n            font-size: 2.25vh;\n            cursor: pointer;\n        }\n\n        .switch {\n            position: relative;\n            display: inline-block;\n            width: 60px;\n            height: calc(4vh + 8px);\n        }\n\n        .switch input {\n            opacity: 0;\n            width: 0;\n            height: 0;\n        }\n\n        .slider {\n            position: absolute;\n            cursor: pointer;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: #ccc;\n            transition: .4s;\n            border-radius: 34px;\n        }\n\n        .slider:before {\n            position: absolute;\n            content: "";\n            height: 4vh;\n            width: 26px;\n            left: 4px;\n            bottom: 4px;\n            background-color: white;\n            transition: .4s;\n            border-radius: 50%;\n        }\n\n        input:checked + .slider {\n            background-color: #5bc75f;\n        }\n\n        input:focus + .slider {\n            box-shadow: 0 0 1px #5bc75f;\n        }\n\n        input:checked + .slider:before {\n            transform: translateX(26px);\n        }\n    </style>\n        <div class="ssd_container" id="${n.get().guiID}">\n            <div class="ssd_title">ShellShocked</div>\n            <div class="ssd_description">the most advanced hack for shell shockers.</div>\n            <hr class="ssd_divider" />\n            <div class="ssd_header">Cheats</div>\n            <div class="ssd_cheatRow">\n                <div class="ssd_cheatName">Aimbot</div>\n                <div class="ssd_key">key: ${s.get().aimbot.key.toUpperCase()}</div>\n                <label class="switch">\n                    <input type="checkbox" checked="${s.get().aimbot.enabled}" onchange="setVal('aimbot');" id="${n.get().aimbot}">\n                    <span class="slider round"></span>\n                </label>\n            </div>\n            <div class="ssd_cheatRow">\n                <div class="ssd_cheatName">Right Mouse Aimbot</div>\n                <div class="ssd_key">key: ${s.get().aimbot.rightMouse.key.toUpperCase()}</div>\n                <label class="switch">\n                    <input type="checkbox" checked="${s.get().aimbot.rightMouse.enabled}" onchange="setVal('rightmouse');" id="${n.get().rightmouse}">\n                    <span class="slider round"></span>\n                </label>\n            </div>\n            <div class="ssd_cheatRow">\n                <div class="ssd_cheatName">ESP</div>\n                <div class="ssd_key">key: ${s.get().esp.key.toUpperCase()}</div>\n                <label class="switch">\n                    <input type="checkbox" checked="${s.get().esp.enabled}" onchange="setVal('esp');" id="${n.get().esp}">\n                    <span class="slider round"></span>\n                </label>\n            </div>\n            <div class="ssd_cheatRow">\n                <div class="ssd_cheatName">ESP Boxes</div>\n                <div class="ssd_key">key: ${s.get().espBoxes.key.toUpperCase()}</div>\n                <label class="switch">\n                    <input type="checkbox" checked="${s.get().espBoxes.enabled}" onchange="setVal('espboxes');" id="${n.get().espboxes}">\n                    <span class="slider round"></span>\n                </label>\n            </div>\n            <div class="ssd_cheatRow">\n                <div class="ssd_cheatName">ESP Lines</div>\n                <div class="ssd_key">key: ${s.get().espLines.key.toUpperCase()}</div>\n                <label class="switch">\n                    <input type="checkbox" checked="${s.get().espLines.enabled}" onchange="setVal('esplines');" id="${n.get().esplines}">\n                    <span class="slider round"></span>\n                </label>\n            </div>\n            <hr class="ssd_divider" />\n            <div class="ssd_buttons">\n                <div class="ssd_button" onclick="document.documentElement.requestFullscreen();">Fullscreen</div>\n                <div class="ssd_button" onclick="location.reload();">Reload</div>\n            </div>\n        </div>\n    `)}()))})();
})();